class Solution {
 
    int f(int[][] matrix,Integer[][] dp,int i,int j,int n){
         if(i<0 || i>=n){
            return (int) Math.pow(10,8);
         }
         if(j==0){
            return matrix[0][i];
         }
         if(dp[j][i]!=null){
            return dp[j][i];
         }
         int ans1=matrix[j][i]+f(matrix,dp,i-1,j-1,n);
         int ans2=matrix[j][i]+f(matrix,dp,i,j-1,n);
         int ans3=matrix[j][i]+f(matrix,dp,i+1,j-1,n);
         return dp[j][i]=Math.min(ans1,Math.min(ans2,ans3));
    }
    public int minFallingPathSum(int[][] matrix) {
        
        int n=matrix.length;
        Integer[][] dp = new Integer[n+ 1][n];
        int ans=Integer.MAX_VALUE;
        for(int i=0;i<n;i++){
            ans=Math.min(ans,f(matrix,dp,i,n-1,n));
        }
        return ans;
    }
}
